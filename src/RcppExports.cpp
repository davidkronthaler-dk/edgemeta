// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cd_single
double cd_single(Rcpp::NumericVector h0, Rcpp::NumericVector es, Rcpp::NumericVector se, double h);
RcppExport SEXP _edgemeta_cd_single(SEXP h0SEXP, SEXP esSEXP, SEXP seSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(cd_single(h0, es, se, h));
    return rcpp_result_gen;
END_RCPP
}
// CD_cpp
Rcpp::NumericVector CD_cpp(Rcpp::NumericVector h0, Rcpp::NumericVector es, Rcpp::NumericVector se, double h);
RcppExport SEXP _edgemeta_CD_cpp(SEXP h0SEXP, SEXP esSEXP, SEXP seSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(CD_cpp(h0, es, se, h));
    return rcpp_result_gen;
END_RCPP
}
// crpsCPP
double crpsCPP(NumericVector s, NumericVector t);
RcppExport SEXP _edgemeta_crpsCPP(SEXP sSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(crpsCPP(s, t));
    return rcpp_result_gen;
END_RCPP
}
// p_wald
Rcpp::NumericVector p_wald(double x, Rcpp::NumericVector es, Rcpp::NumericVector se);
RcppExport SEXP _edgemeta_p_wald(SEXP xSEXP, SEXP esSEXP, SEXP seSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    rcpp_result_gen = Rcpp::wrap(p_wald(x, es, se));
    return rcpp_result_gen;
END_RCPP
}
// pfctedge
Rcpp::NumericVector pfctedge(Rcpp::NumericVector h0, Rcpp::NumericVector es, Rcpp::NumericVector se);
RcppExport SEXP _edgemeta_pfctedge(SEXP h0SEXP, SEXP esSEXP, SEXP seSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    rcpp_result_gen = Rcpp::wrap(pfctedge(h0, es, se));
    return rcpp_result_gen;
END_RCPP
}
// opti_edge
double opti_edge(Rcpp::NumericVector es, Rcpp::NumericVector se);
RcppExport SEXP _edgemeta_opti_edge(SEXP esSEXP, SEXP seSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    rcpp_result_gen = Rcpp::wrap(opti_edge(es, se));
    return rcpp_result_gen;
END_RCPP
}
// opti_num
Rcpp::List opti_num(NumericVector es, NumericVector se, bool point, bool ci, double levelci);
RcppExport SEXP _edgemeta_opti_num(SEXP esSEXP, SEXP seSEXP, SEXP pointSEXP, SEXP ciSEXP, SEXP levelciSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< bool >::type point(pointSEXP);
    Rcpp::traits::input_parameter< bool >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< double >::type levelci(levelciSEXP);
    rcpp_result_gen = Rcpp::wrap(opti_num(es, se, point, ci, levelci));
    return rcpp_result_gen;
END_RCPP
}
// Q_cpp
double Q_cpp(Rcpp::NumericVector es, Rcpp::NumericVector se, double tau2);
RcppExport SEXP _edgemeta_Q_cpp(SEXP esSEXP, SEXP seSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(Q_cpp(es, se, tau2));
    return rcpp_result_gen;
END_RCPP
}
// dQ_cpp
double dQ_cpp(Rcpp::NumericVector es, Rcpp::NumericVector se, double tau2, double h);
RcppExport SEXP _edgemeta_dQ_cpp(SEXP esSEXP, SEXP seSEXP, SEXP tau2SEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(dQ_cpp(es, se, tau2, h));
    return rcpp_result_gen;
END_RCPP
}
// dQIVWE
double dQIVWE(NumericVector es, NumericVector se, double tau2);
RcppExport SEXP _edgemeta_dQIVWE(SEXP esSEXP, SEXP seSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(dQIVWE(es, se, tau2));
    return rcpp_result_gen;
END_RCPP
}
// ftau2
Rcpp::NumericVector ftau2(Rcpp::NumericVector es, Rcpp::NumericVector se, Rcpp::NumericVector tau2);
RcppExport SEXP _edgemeta_ftau2(SEXP esSEXP, SEXP seSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(ftau2(es, se, tau2));
    return rcpp_result_gen;
END_RCPP
}
// norftau2
double norftau2(NumericVector es, NumericVector se, double utau2);
RcppExport SEXP _edgemeta_norftau2(SEXP esSEXP, SEXP seSEXP, SEXP utau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type utau2(utau2SEXP);
    rcpp_result_gen = Rcpp::wrap(norftau2(es, se, utau2));
    return rcpp_result_gen;
END_RCPP
}
// jointCD
double jointCD(Rcpp::NumericVector mu, Rcpp::NumericVector tau2, Rcpp::NumericVector es, Rcpp::NumericVector se, double C);
RcppExport SEXP _edgemeta_jointCD(SEXP muSEXP, SEXP tau2SEXP, SEXP esSEXP, SEXP seSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(jointCD(mu, tau2, es, se, C));
    return rcpp_result_gen;
END_RCPP
}
// marCDsingle
double marCDsingle(double mu, Rcpp::NumericVector es, Rcpp::NumericVector se, double utau2);
RcppExport SEXP _edgemeta_marCDsingle(SEXP muSEXP, SEXP esSEXP, SEXP seSEXP, SEXP utau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type utau2(utau2SEXP);
    rcpp_result_gen = Rcpp::wrap(marCDsingle(mu, es, se, utau2));
    return rcpp_result_gen;
END_RCPP
}
// marCD
Rcpp::NumericVector marCD(Rcpp::NumericVector mu, Rcpp::NumericVector es, Rcpp::NumericVector se, double utau2);
RcppExport SEXP _edgemeta_marCD(SEXP muSEXP, SEXP esSEXP, SEXP seSEXP, SEXP utau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type utau2(utau2SEXP);
    rcpp_result_gen = Rcpp::wrap(marCD(mu, es, se, utau2));
    return rcpp_result_gen;
END_RCPP
}
// reff
NumericMatrix reff(NumericVector es, NumericVector se, double utau2, double grid_step);
RcppExport SEXP _edgemeta_reff(SEXP esSEXP, SEXP seSEXP, SEXP utau2SEXP, SEXP grid_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type utau2(utau2SEXP);
    Rcpp::traits::input_parameter< double >::type grid_step(grid_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(reff(es, se, utau2, grid_step));
    return rcpp_result_gen;
END_RCPP
}
// samponemu
double samponemu(double s_tau2, Rcpp::NumericVector es, Rcpp::NumericVector se);
RcppExport SEXP _edgemeta_samponemu(SEXP s_tau2SEXP, SEXP esSEXP, SEXP seSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type s_tau2(s_tau2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    rcpp_result_gen = Rcpp::wrap(samponemu(s_tau2, es, se));
    return rcpp_result_gen;
END_RCPP
}
// samplemu
Rcpp::NumericVector samplemu(Rcpp::NumericVector s_tau2, Rcpp::NumericVector es, Rcpp::NumericVector se);
RcppExport SEXP _edgemeta_samplemu(SEXP s_tau2SEXP, SEXP esSEXP, SEXP seSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s_tau2(s_tau2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    rcpp_result_gen = Rcpp::wrap(samplemu(s_tau2, es, se));
    return rcpp_result_gen;
END_RCPP
}
// samponetau2
double samponetau2(Rcpp::NumericVector es, Rcpp::NumericVector se, double upper);
RcppExport SEXP _edgemeta_samponetau2(SEXP esSEXP, SEXP seSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(samponetau2(es, se, upper));
    return rcpp_result_gen;
END_RCPP
}
// samptau2
Rcpp::NumericVector samptau2(int ns, Rcpp::NumericVector es, Rcpp::NumericVector se, double upper);
RcppExport SEXP _edgemeta_samptau2(SEXP nsSEXP, SEXP esSEXP, SEXP seSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(samptau2(ns, es, se, upper));
    return rcpp_result_gen;
END_RCPP
}
// samplemusimple
Rcpp::NumericVector samplemusimple(int n_samples, double tau2, Rcpp::NumericVector es, Rcpp::NumericVector se);
RcppExport SEXP _edgemeta_samplemusimple(SEXP n_samplesSEXP, SEXP tau2SEXP, SEXP esSEXP, SEXP seSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type es(esSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type se(seSEXP);
    rcpp_result_gen = Rcpp::wrap(samplemusimple(n_samples, tau2, es, se));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_edgemeta_cd_single", (DL_FUNC) &_edgemeta_cd_single, 4},
    {"_edgemeta_CD_cpp", (DL_FUNC) &_edgemeta_CD_cpp, 4},
    {"_edgemeta_crpsCPP", (DL_FUNC) &_edgemeta_crpsCPP, 2},
    {"_edgemeta_p_wald", (DL_FUNC) &_edgemeta_p_wald, 3},
    {"_edgemeta_pfctedge", (DL_FUNC) &_edgemeta_pfctedge, 3},
    {"_edgemeta_opti_edge", (DL_FUNC) &_edgemeta_opti_edge, 2},
    {"_edgemeta_opti_num", (DL_FUNC) &_edgemeta_opti_num, 5},
    {"_edgemeta_Q_cpp", (DL_FUNC) &_edgemeta_Q_cpp, 3},
    {"_edgemeta_dQ_cpp", (DL_FUNC) &_edgemeta_dQ_cpp, 4},
    {"_edgemeta_dQIVWE", (DL_FUNC) &_edgemeta_dQIVWE, 3},
    {"_edgemeta_ftau2", (DL_FUNC) &_edgemeta_ftau2, 3},
    {"_edgemeta_norftau2", (DL_FUNC) &_edgemeta_norftau2, 3},
    {"_edgemeta_jointCD", (DL_FUNC) &_edgemeta_jointCD, 5},
    {"_edgemeta_marCDsingle", (DL_FUNC) &_edgemeta_marCDsingle, 4},
    {"_edgemeta_marCD", (DL_FUNC) &_edgemeta_marCD, 4},
    {"_edgemeta_reff", (DL_FUNC) &_edgemeta_reff, 4},
    {"_edgemeta_samponemu", (DL_FUNC) &_edgemeta_samponemu, 3},
    {"_edgemeta_samplemu", (DL_FUNC) &_edgemeta_samplemu, 3},
    {"_edgemeta_samponetau2", (DL_FUNC) &_edgemeta_samponetau2, 3},
    {"_edgemeta_samptau2", (DL_FUNC) &_edgemeta_samptau2, 4},
    {"_edgemeta_samplemusimple", (DL_FUNC) &_edgemeta_samplemusimple, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_edgemeta(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
